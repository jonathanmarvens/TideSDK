#!/usr/bin/env python

# (c) 2008-2012 Appcelerator Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from os import path
Import('build env module')

env.Append(LIBPATH=[build.get_module('tiapp').dir])
env.Append(CPPPATH = ['%s/modules/ti.App' % build.titanium_source_dir])

build.add_thirdparty(env, 'poco')
build.add_thirdparty(env, 'webkit')
env.Append(LIBS=['tiappmodule'])

sources = Glob('*.cpp') + ['url/url.cpp']

if not build.tidelite:
    sources = sources + Glob('lang_binding/*.cpp')

if build.is_linux():
    sources = sources + Glob('gtk/*.cpp')
    env.Append(LIBS=['Xss', 'libsoup-2.4', 'libsoup-gnome-2.4'])
    env.ParseConfig('PKG_CONFIG_PATH=${PKG_CONFIG_PATH} pkg-config --cflags --libs libnotify gtk+-2.0 gdk-2.0 x11 xext')

elif build.is_win32():
    build.add_thirdparty(env, 'cairo')
    sources = sources + Glob('win32/*.cpp')
    sources += Glob('binding/kjs*.cpp')
    env.Append(CPPPATH=[build.tp('icu', 'include')])
    env.Append(LIBS=[
        'kernel32', 'shell32', 'user32', 'ole32', 'comdlg32', 'comctl32',
        'gdi32', 'shlwapi', 'oleaut32', 'icuuc', 'pthreadVC2', 'libcurl_imp',
        'comsuppw', 'advapi32'])
    env.Append(CCFLAGS=['/MD', '/DUNICODE', '/D_UNICODE'])
    env.Append(LINKFLAGS=['/NODEFAULTLIB:LIBCMT.lib', '/LTCG', '/INCREMENTAL:NO', '/OPT:REF'])

elif build.is_osx():
    env.Append(FRAMEWORKPATH=[build.tp('growl')])
    env.Append(FRAMEWORKS=['Cocoa','Carbon', 'IOKit', 'Growl'])
    sources = sources + Glob('osx/*.mm') + Glob('osx/*.cpp')
    env.Append(CCFLAGS=['-x', 'objective-c++'])

# Copy the support files the module build directory
build.utils.LightWeightCopy(path.join(build.cwd(), 'support'), module.dir)
build.mark_build_target(env.SharedLibrary(
    path.join(module.dir,'tiuimodule'), sources))
